
1. Создать двух пользователей:

user1 = User.objects.create(username='Ivan', first_name='Ivanov')
user2 = User.objects.create(username='Mike', first_name='Ber')

2. Создать два объекта модели Author, связанные с пользователями:

Author.objects.create(authorUser=user1)
Author.objects.create(authorUser=user2)

3. Добавить 4 категории в модель Category:

Category.objects.create(name='IT')
Category.objects.create(name='kids')
Category.objects.create(name='Fantastic')
Category.objects.create(name='Garden')

4. Добавить 2 статьи и 1 новость:

Post.objects.create(authorArticle=Author.objects.get(authorUser=User.objects.get(username='Mike')), categoryType='NW', title='Известный миллиардер отправился на дно к «Титанику» и пропал.', text='Богатейшие люди мира часто не прочь пощекотать себе нервы: они наперегонки летают в космос, погружаются на дно океана и позволяют себе другие дорогостоящие, но оттого не менее безрассудные выходки. «Лента.ру» выбрала самые рискованные поступки, которые совершали миллиардеры, и посчитала, во сколько они им обошлись.')
Post.objects.create(authorArticle=Author.objects.get(authorUser=User.objects.get(username='Mike')), categoryType='AR', title='Название2', text='Текст2')
Post.objects.create(authorArticle=Author.objects.get(authorUser=User.objects.get(username='Ivan')), categoryType='AR', title='Название3', text='Текст3')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):

p1 = Post.objects.get(pk=1)
p2 = Post.objects.get(pk=2)
p3 = Post.objects.get(pk=3)


c1 = Category.objects.get(name='IT')
c2 = Category.objects.get(name='kids')
c3 = Category.objects.get(name='Fantastic')
c4 = Category.objects.get(name='Garden')


p1.postCategory.add(c1)
p2.postCategory.add(c1, c2)
p3.postCategory.add(c4)
p4.postCategory.add(c2, c3)
p5.postCategory.add(c1, c4)



6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):

Comment.objects.create(commentUser=User.objects.get(username='Mike'), commentPost=Post.objects.get(pk=1), text='Прекрасно')
Comment.objects.create(commentUser=User.objects.get(username='Ivan'), commentPost=Post.objects.get(pk=1), text='Ужасно')
Comment.objects.create(commentUser=User.objects.get(username='Ivan'), commentPost=Post.objects.get(pk=2), text='Очень интересно')
Comment.objects.create(commentUser=User.objects.get(username='Mike'), commentPost=Post.objects.get(pk=3), text='Тема не раскрыта')
Comment.objects.create(commentUser=User.objects.get(username='Ivan'), commentPost=Post.objects.get(pk=4), text='Написано хорошо')
Comment.objects.create(commentUser=User.objects.get(username='Mike'), commentPost=Post.objects.get(pk=4), text='Автор молодец')



7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:

Comment.objects.get(pk=1).dislike()
>>> Comment.objects.get(pk=2).like()
>>> Comment.objects.get(pk=2).like()
>>> Comment.objects.get(pk=3).like()
>>> Comment.objects.get(pk=3).like()
>>> Comment.objects.get(pk=3).like()
>>> Comment.objects.get(pk=2).dislike()
>>>  Comment.objects.get(pk=2).dislike()
>>> Comment.objects.get(pk=3).dislike()
>>> Comment.objects.get(pk=4).dislike()
>>> Comment.objects.get(pk=4).dislike()
>>> Comment.objects.get(pk=5).dislike()
>>> Comment.objects.get(pk=5).like()
>>> Comment.objects.get(pk=5).like()
>>> Comment.objects.get(pk=5).like()
>>> Comment.objects.get(pk=5).like()
>>> Comment.objects.get(pk=4).like()


Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).dislike()
>>> Post.objects.get(pk=2).like()
>>> Post.objects.get(pk=2).like()
>>> Post.objects.get(pk=2).dislike()
>>> Post.objects.get(pk=3).like()
>>> Post.objects.get(pk=3).like()
>>> Post.objects.get(pk=3).like()
>>> Post.objects.get(pk=4).like()
>>> Post.objects.get(pk=3).like()
>>> Post.objects.get(pk=4).like()
>>> Post.objects.get(pk=5).like()
>>> Post.objects.get(pk=5).like()
>>> Post.objects.get(pk=5).like()
>>> Post.objects.get(pk=5).like()
>>> Post.objects.get(pk=3).dislike()
>>> Post.objects.get(pk=3).dislike()
>>> Post.objects.get(pk=3).dislike()
>>> Post.objects.get(pk=4).dislike()
>>> Post.objects.get(pk=5).dislike()



8. Обновить рейтинги пользователей:

Author.objects.get(authorUser=User.objects.get(username='Ivan')).update_rating()
Author.objects.get(authorUser=User.objects.get(username='Mike')).update_rating()
>>> a = Author.objects.get(authorUser=User.objects.get(username='Ivan'))
>>> a.ratingAuthor

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):

best = Author.objects.all().order_by('-ratingAuthor').values('authorUser', 'ratingAuthor')[0]
print(best)

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье:

bestPost = Post.objects.all().order_by('-rating').values('id', 'dateCreation', 'author_id', 'rating', 'title')[0]
print(bestPost)

print(bestPost['dateCreation'].strftime('%d.%m.%Y %H:%M:%S'))
print(User.objects.get(pk = bestPost['author_id']))
print(bestPost['rating'])
print(bestPost['title'])
print(Post.objects.get(title=bestPost['title']).preview())

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье:
bestComments = Comment.objects.filter(commentPost = bestPost['id']).values('dateCreation', 'commentUser_id', 'rating', 'text')
print(bestComments)